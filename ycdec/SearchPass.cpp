
#include <iostream>
#include <conio.h>
#include <vector>
#include <bit>
#include "SearchPass.h"

const unsigned char SearchPass::chrcode[256] =
{
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x2D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2B,0x00,0x00,
	0x25,0x04,0x0C,0x14,0x1C,0x24,0x05,0x0D,0x15,0x1D,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x01,0x09,0x11,0x19,0x21,0x29,0x31,0x02,
	0x0A,0x12,0x1A,0x22,0x2A,0x32,0x03,0x0B,0x13,0x1B,0x23,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x35,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x2C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

#if !defined(XOR_VAR_TABLE)
const unsigned char lut_xor31F4[256] = {
	0x00,0x11,0x23,0x32,0x46,0x57,0x65,0x74,0x8C,0x9D,0xAF,0xBE,0xCA,0xDB,0xE9,0xF8,
	0x10,0x01,0x33,0x22,0x56,0x47,0x75,0x64,0x9C,0x8D,0xBF,0xAE,0xDA,0xCB,0xF9,0xE8,
	0x21,0x30,0x02,0x13,0x67,0x76,0x44,0x55,0xAD,0xBC,0x8E,0x9F,0xEB,0xFA,0xC8,0xD9,
	0x31,0x20,0x12,0x03,0x77,0x66,0x54,0x45,0xBD,0xAC,0x9E,0x8F,0xFB,0xEA,0xD8,0xC9,
	0x42,0x53,0x61,0x70,0x04,0x15,0x27,0x36,0xCE,0xDF,0xED,0xFC,0x88,0x99,0xAB,0xBA,
	0x52,0x43,0x71,0x60,0x14,0x05,0x37,0x26,0xDE,0xCF,0xFD,0xEC,0x98,0x89,0xBB,0xAA,
	0x63,0x72,0x40,0x51,0x25,0x34,0x06,0x17,0xEF,0xFE,0xCC,0xDD,0xA9,0xB8,0x8A,0x9B,
	0x73,0x62,0x50,0x41,0x35,0x24,0x16,0x07,0xFF,0xEE,0xDC,0xCD,0xB9,0xA8,0x9A,0x8B,
	0x84,0x95,0xA7,0xB6,0xC2,0xD3,0xE1,0xF0,0x08,0x19,0x2B,0x3A,0x4E,0x5F,0x6D,0x7C,
	0x94,0x85,0xB7,0xA6,0xD2,0xC3,0xF1,0xE0,0x18,0x09,0x3B,0x2A,0x5E,0x4F,0x7D,0x6C,
	0xA5,0xB4,0x86,0x97,0xE3,0xF2,0xC0,0xD1,0x29,0x38,0x0A,0x1B,0x6F,0x7E,0x4C,0x5D,
	0xB5,0xA4,0x96,0x87,0xF3,0xE2,0xD0,0xC1,0x39,0x28,0x1A,0x0B,0x7F,0x6E,0x5C,0x4D,
	0xC6,0xD7,0xE5,0xF4,0x80,0x91,0xA3,0xB2,0x4A,0x5B,0x69,0x78,0x0C,0x1D,0x2F,0x3E,
	0xD6,0xC7,0xF5,0xE4,0x90,0x81,0xB3,0xA2,0x5A,0x4B,0x79,0x68,0x1C,0x0D,0x3F,0x2E,
	0xE7,0xF6,0xC4,0xD5,0xA1,0xB0,0x82,0x93,0x6B,0x7A,0x48,0x59,0x2D,0x3C,0x0E,0x1F,
	0xF7,0xE6,0xD4,0xC5,0xB1,0xA0,0x92,0x83,0x7B,0x6A,0x58,0x49,0x3D,0x2C,0x1E,0x0F,
};
const unsigned char lut_xor31F5[256] = {
	0x00,0x89,0x12,0x9B,0x24,0xAD,0x36,0xBF,0x48,0xC1,0x5A,0xD3,0x6C,0xE5,0x7E,0xF7,
	0x81,0x08,0x93,0x1A,0xA5,0x2C,0xB7,0x3E,0xC9,0x40,0xDB,0x52,0xED,0x64,0xFF,0x76,
	0x02,0x8B,0x10,0x99,0x26,0xAF,0x34,0xBD,0x4A,0xC3,0x58,0xD1,0x6E,0xE7,0x7C,0xF5,
	0x83,0x0A,0x91,0x18,0xA7,0x2E,0xB5,0x3C,0xCB,0x42,0xD9,0x50,0xEF,0x66,0xFD,0x74,
	0x04,0x8D,0x16,0x9F,0x20,0xA9,0x32,0xBB,0x4C,0xC5,0x5E,0xD7,0x68,0xE1,0x7A,0xF3,
	0x85,0x0C,0x97,0x1E,0xA1,0x28,0xB3,0x3A,0xCD,0x44,0xDF,0x56,0xE9,0x60,0xFB,0x72,
	0x06,0x8F,0x14,0x9D,0x22,0xAB,0x30,0xB9,0x4E,0xC7,0x5C,0xD5,0x6A,0xE3,0x78,0xF1,
	0x87,0x0E,0x95,0x1C,0xA3,0x2A,0xB1,0x38,0xCF,0x46,0xDD,0x54,0xEB,0x62,0xF9,0x70,
	0x08,0x81,0x1A,0x93,0x2C,0xA5,0x3E,0xB7,0x40,0xC9,0x52,0xDB,0x64,0xED,0x76,0xFF,
	0x89,0x00,0x9B,0x12,0xAD,0x24,0xBF,0x36,0xC1,0x48,0xD3,0x5A,0xE5,0x6C,0xF7,0x7E,
	0x0A,0x83,0x18,0x91,0x2E,0xA7,0x3C,0xB5,0x42,0xCB,0x50,0xD9,0x66,0xEF,0x74,0xFD,
	0x8B,0x02,0x99,0x10,0xAF,0x26,0xBD,0x34,0xC3,0x4A,0xD1,0x58,0xE7,0x6E,0xF5,0x7C,
	0x0C,0x85,0x1E,0x97,0x28,0xA1,0x3A,0xB3,0x44,0xCD,0x56,0xDF,0x60,0xE9,0x72,0xFB,
	0x8D,0x04,0x9F,0x16,0xA9,0x20,0xBB,0x32,0xC5,0x4C,0xD7,0x5E,0xE1,0x68,0xF3,0x7A,
	0x0E,0x87,0x1C,0x95,0x2A,0xA3,0x38,0xB1,0x46,0xCF,0x54,0xDD,0x62,0xEB,0x70,0xF9,
	0x8F,0x06,0x9D,0x14,0xAB,0x22,0xB9,0x30,0xC7,0x4E,0xD5,0x5C,0xE3,0x6A,0xF1,0x78,
};
#endif // !XOR_VAR_TABLE

#if defined(XOR_VAR_TABLE)
unsigned char SearchPass::lut_xor31F4[256];
unsigned char SearchPass::lut_xor31F5[256];
#endif  // XOR_VAR_TABLE

// 文字のビットを上下反転するテーブル
unsigned char lut_reverse_char_bit[] = {
  0b00000000, 0b10000000, 0b01000000, 0b11000000, 0b00100000, 0b10100000, 0b01100000, 0b11100000,	// 00 - 07
  0b00010000, 0b10010000, 0b01010000, 0b11010000, 0b00110000, 0b10110000, 0b01110000, 0b11110000,	// 08 - 0F
  0b00001000, 0b10001000, 0b01001000, 0b11001000, 0b00101000, 0b10101000, 0b01101000, 0b11101000,	// 10 - 17
  0b00011000, 0b10011000, 0b01011000, 0b11011000, 0b00111000, 0b10111000, 0b01111000, 0b11111000,	// 18 - 1F
  0b00000100, 0b10000100, 0b01000100, 0b11000100, 0b00100100, 0b10100100, 0b01100100, 0b11100100,	// 20 - 27
  0b00010100, 0b10010100, 0b01010100, 0b11010100, 0b00110100, 0b10110100, 0b01110100, 0b11110100,	// 28 - 2F
  0b00001100, 0b10001100, 0b01001100, 0b11001100, 0b00101100, 0b10101100, 0b01101100, 0b11101100,	// 30 - 37
  0b00011100, 0b10011100, 0b01011100, 0b11011100, 0b00111100, 0b10111100, 0b01111100, 0b11111100,	// 38 - 3F  ** 0x35まであればいいからこのくらい。
};

int SearchPass::kat31F7;
int SearchPass::kat31F8;
int SearchPass::kat31F9;
int SearchPass::kat31FA;
int SearchPass::kat31FB;

// コンストラクタ
SearchPass::SearchPass(int kF7, int kF8, int kF9, int kFA, int kFB)
{

	kat31F7 = kF7;
	kat31F8 = kF8;
	kat31F9 = kF9;
	kat31FA = kFA;
	kat31FB = kFB;

#if defined(XOR_VAR_TABLE)
	create_lut();
#endif  // XOR_VAR_TABLE
}

bool SearchPass::checkPass(Word wd)
{
	bool result;
	std::vector<unsigned char> buffer;

	// 文字コード変換
	for (unsigned char idx = 0; idx < wd.length; ++idx) {
		buffer.push_back(chrcode[wd.str[idx]]);
	}

	result = false;

	unsigned char	a(0), c(0);
	unsigned char	mem2[2] = { 0, 0 };
	unsigned char	mem5[5] = { 0,0,0,1,0 };

	auto ror = [&c](unsigned char v)
	{
		unsigned char wc = c;

		c = v & 0x01;
		return (unsigned char)((v >> 1) | (wc << 7));
	};

	auto adc = [&c](unsigned char lhs, unsigned char rhs)
	{
		unsigned short v;

		v = (unsigned short)lhs + (unsigned short)rhs + (unsigned short)c;
		c = (v > 0xFF) ? 1 : 0;

		return (v & 0xFF);
	};

	auto bitcnt = [](unsigned long int v)
	{
#if !_HAS_CXX20
		v = (v & 0x55555555) + (v >> 1 & 0x55555555);
		v = (v & 0x33333333) + (v >> 2 & 0x33333333);
		v = (v & 0x0f0f0f0f) + (v >> 4 & 0x0f0f0f0f);
		v = (v & 0x00ff00ff) + (v >> 8 & 0x00ff00ff);
		return  (v & 0x0000ffff) + (v >> 16 & 0x0000ffff);
#else
		return std::popcount(v);
#endif
	};

	for (unsigned char chr : buffer) {
		a = chr;
		// calc checkdigit1
#if 0	// original
		for (int bit = 7; bit >= 0; --bit) {
			c = (a >> bit) & 1;
			mem2[0] = ror(mem2[0]);
			mem2[1] = ror(mem2[1]);

			if (c) {
				mem2[0] ^= 0x84;
				mem2[1] ^= 0x08;
			}
		}
#else	// use table
		{
			unsigned char xor31F4 = lut_xor31F4[mem2[1]];
			unsigned char xor31F5 = lut_xor31F5[mem2[1]];

			mem2[1] = mem2[0] ^ xor31F5;
			mem2[0] = lut_reverse_char_bit[a] ^ xor31F4;
		}
#endif
		// calc checkdigit2
#if !defined(PRUNING)
		c = (mem2[0] >= 0xE5) ? 1 : 0;
		mem5[0] = adc(a, mem5[0]);
		mem5[1] = adc(mem5[1], mem2[1]);
#endif
		// calc checkdigit3
		mem5[2] ^= a;
		// calc checkdigit4
#if !defined(PRUNING)
		{
			unsigned char v = ror(mem5[3]);
			mem5[3] = adc(v, a);
		}
#endif
		// calc checkdigit5
#if !defined(PRUNING)
		mem5[4] += (unsigned char)(c + bitcnt(a));
#endif
	}

	if (true
		&& (mem2[0] == 0x65)
		&& (mem2[1] == 0x94)
#if !defined(PRUNING)
		&& (mem5[0] == kat31F7)
		&& (mem5[1] == kat31F8)
#endif
		&& (mem5[2] == kat31F9)
#if !defined(PRUNING)
		&& (mem5[3] == kat31FA)
		&& (mem5[4] == kat31FB)
#endif
		) {

#if !defined(PRUNING)
		std::cout << "#hit! " << wd.str << std::endl;
#else	// 枝刈りに残った候補を表示する
//		fprintf(stdout, "%s  [$31F4, $31F5] = (%02X %02X)\n", wd.str, mem2[0], mem2[1]);
		std::cout << wd.str << std::endl;
#endif
		return (true);
	}

	return (false);
}

#if defined(XOR_VAR_TABLE)
void SearchPass::create_lut() {
	for (int t31F5 = 0; t31F5 < 256; t31F5++) {
		int A = 0;
		int C = 0;
		int a31F4 = 0;
		int a31F5 = t31F5;
		for (int Y = 0; Y < 8; Y++) {
			C = A & 0x01;
			A >>= 1;

			a31F4 |= C << 8;
			C = a31F4 & 0x01;
			a31F4 >>= 1;

			a31F5 |= C << 8;
			C = a31F5 & 0x01;
			a31F5 >>= 1;

			if (C > 0) {
				a31F4 = (a31F4 ^ 0x84) & 0xFF;
				a31F5 = (a31F5 ^ 0x08) & 0xFF;
			}
		}
		lut_xor31F4[t31F5] = a31F4 & 0xFF;
		lut_xor31F5[t31F5] = a31F5 & 0xFF;
	}
#if defined(XORMAP_DUMP)
	create_lut();
	cout << "const unsigned char xor31F4[256] = {";
	for (int y = 0; y < 16; ++y) {
		fprintf(stdout, "\n");
		for (int x = 0; x < 16; ++x) {
			fprintf(stdout, "0x%02X,", lut_xor31F4[(y * 16) + x]);
		}
	}
	cout << "\n};" << endl;
	cout << "const unsigned char xor31F5[256] = {";
	for (int y = 0; y < 16; ++y) {
		fprintf(stdout, "\n");
		for (int x = 0; x < 16; ++x) {
			fprintf(stdout, "0x%02X,", lut_xor31F5[(y * 16) + x]);
		}
	}
	cout << "\n};" << endl;
#endif // XORMAP_DUMP
}
#endif	// XOR_VAR_TABLE